// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pepenet_social.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pepenet_5fsocial_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pepenet_5fsocial_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pepenet_5fsocial_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pepenet_5fsocial_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pepenet_5fsocial_2eproto;
namespace pepenet_social_protos {
class pep;
class pepDefaultTypeInternal;
extern pepDefaultTypeInternal _pep_default_instance_;
class pep_base;
class pep_baseDefaultTypeInternal;
extern pep_baseDefaultTypeInternal _pep_base_default_instance_;
class post;
class postDefaultTypeInternal;
extern postDefaultTypeInternal _post_default_instance_;
class post_base;
class post_baseDefaultTypeInternal;
extern post_baseDefaultTypeInternal _post_base_default_instance_;
}  // namespace pepenet_social_protos
PROTOBUF_NAMESPACE_OPEN
template<> ::pepenet_social_protos::pep* Arena::CreateMaybeMessage<::pepenet_social_protos::pep>(Arena*);
template<> ::pepenet_social_protos::pep_base* Arena::CreateMaybeMessage<::pepenet_social_protos::pep_base>(Arena*);
template<> ::pepenet_social_protos::post* Arena::CreateMaybeMessage<::pepenet_social_protos::post>(Arena*);
template<> ::pepenet_social_protos::post_base* Arena::CreateMaybeMessage<::pepenet_social_protos::post_base>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pepenet_social_protos {

// ===================================================================

class pep_base PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pepenet_social_protos.pep_base) */ {
 public:
  inline pep_base() : pep_base(nullptr) {};
  virtual ~pep_base();

  pep_base(const pep_base& from);
  pep_base(pep_base&& from) noexcept
    : pep_base() {
    *this = ::std::move(from);
  }

  inline pep_base& operator=(const pep_base& from) {
    CopyFrom(from);
    return *this;
  }
  inline pep_base& operator=(pep_base&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pep_base& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pep_base* internal_default_instance() {
    return reinterpret_cast<const pep_base*>(
               &_pep_base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pep_base& a, pep_base& b) {
    a.Swap(&b);
  }
  inline void Swap(pep_base* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pep_base* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pep_base* New() const final {
    return CreateMaybeMessage<pep_base>(nullptr);
  }

  pep_base* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pep_base>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pep_base& from);
  void MergeFrom(const pep_base& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pep_base* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pepenet_social_protos.pep_base";
  }
  protected:
  explicit pep_base(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pepenet_5fsocial_2eproto);
    return ::descriptor_table_pepenet_5fsocial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kPseudonymFieldNumber = 2,
    kPkFieldNumber = 3,
    kTxRefFieldNumber = 4,
    kPepetagFieldNumber = 5,
    kDonationAddressFieldNumber = 6,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string pseudonym = 2;
  void clear_pseudonym();
  const std::string& pseudonym() const;
  void set_pseudonym(const std::string& value);
  void set_pseudonym(std::string&& value);
  void set_pseudonym(const char* value);
  void set_pseudonym(const char* value, size_t size);
  std::string* mutable_pseudonym();
  std::string* release_pseudonym();
  void set_allocated_pseudonym(std::string* pseudonym);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pseudonym();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pseudonym(
      std::string* pseudonym);
  private:
  const std::string& _internal_pseudonym() const;
  void _internal_set_pseudonym(const std::string& value);
  std::string* _internal_mutable_pseudonym();
  public:

  // bytes pk = 3;
  void clear_pk();
  const std::string& pk() const;
  void set_pk(const std::string& value);
  void set_pk(std::string&& value);
  void set_pk(const char* value);
  void set_pk(const void* value, size_t size);
  std::string* mutable_pk();
  std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pk();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pk(
      std::string* pk);
  private:
  const std::string& _internal_pk() const;
  void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  // bytes tx_ref = 4;
  void clear_tx_ref();
  const std::string& tx_ref() const;
  void set_tx_ref(const std::string& value);
  void set_tx_ref(std::string&& value);
  void set_tx_ref(const char* value);
  void set_tx_ref(const void* value, size_t size);
  std::string* mutable_tx_ref();
  std::string* release_tx_ref();
  void set_allocated_tx_ref(std::string* tx_ref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tx_ref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tx_ref(
      std::string* tx_ref);
  private:
  const std::string& _internal_tx_ref() const;
  void _internal_set_tx_ref(const std::string& value);
  std::string* _internal_mutable_tx_ref();
  public:

  // string pepetag = 5;
  void clear_pepetag();
  const std::string& pepetag() const;
  void set_pepetag(const std::string& value);
  void set_pepetag(std::string&& value);
  void set_pepetag(const char* value);
  void set_pepetag(const char* value, size_t size);
  std::string* mutable_pepetag();
  std::string* release_pepetag();
  void set_allocated_pepetag(std::string* pepetag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pepetag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pepetag(
      std::string* pepetag);
  private:
  const std::string& _internal_pepetag() const;
  void _internal_set_pepetag(const std::string& value);
  std::string* _internal_mutable_pepetag();
  public:

  // string donation_address = 6;
  void clear_donation_address();
  const std::string& donation_address() const;
  void set_donation_address(const std::string& value);
  void set_donation_address(std::string&& value);
  void set_donation_address(const char* value);
  void set_donation_address(const char* value, size_t size);
  std::string* mutable_donation_address();
  std::string* release_donation_address();
  void set_allocated_donation_address(std::string* donation_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_donation_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_donation_address(
      std::string* donation_address);
  private:
  const std::string& _internal_donation_address() const;
  void _internal_set_donation_address(const std::string& value);
  std::string* _internal_mutable_donation_address();
  public:

  // @@protoc_insertion_point(class_scope:pepenet_social_protos.pep_base)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudonym_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pepetag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr donation_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pepenet_5fsocial_2eproto;
};
// -------------------------------------------------------------------

class pep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pepenet_social_protos.pep) */ {
 public:
  inline pep() : pep(nullptr) {};
  virtual ~pep();

  pep(const pep& from);
  pep(pep&& from) noexcept
    : pep() {
    *this = ::std::move(from);
  }

  inline pep& operator=(const pep& from) {
    CopyFrom(from);
    return *this;
  }
  inline pep& operator=(pep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pep* internal_default_instance() {
    return reinterpret_cast<const pep*>(
               &_pep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pep& a, pep& b) {
    a.Swap(&b);
  }
  inline void Swap(pep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pep* New() const final {
    return CreateMaybeMessage<pep>(nullptr);
  }

  pep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pep& from);
  void MergeFrom(const pep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pepenet_social_protos.pep";
  }
  protected:
  explicit pep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pepenet_5fsocial_2eproto);
    return ::descriptor_table_pepenet_5fsocial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // bytes sig = 2;
  void clear_sig();
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sig(
      std::string* sig);
  private:
  const std::string& _internal_sig() const;
  void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // .pepenet_social_protos.pep_base base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pepenet_social_protos::pep_base& base() const;
  ::pepenet_social_protos::pep_base* release_base();
  ::pepenet_social_protos::pep_base* mutable_base();
  void set_allocated_base(::pepenet_social_protos::pep_base* base);
  private:
  const ::pepenet_social_protos::pep_base& _internal_base() const;
  ::pepenet_social_protos::pep_base* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pepenet_social_protos::pep_base* base);
  ::pepenet_social_protos::pep_base* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:pepenet_social_protos.pep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::pepenet_social_protos::pep_base* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pepenet_5fsocial_2eproto;
};
// -------------------------------------------------------------------

class post_base PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pepenet_social_protos.post_base) */ {
 public:
  inline post_base() : post_base(nullptr) {};
  virtual ~post_base();

  post_base(const post_base& from);
  post_base(post_base&& from) noexcept
    : post_base() {
    *this = ::std::move(from);
  }

  inline post_base& operator=(const post_base& from) {
    CopyFrom(from);
    return *this;
  }
  inline post_base& operator=(post_base&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const post_base& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const post_base* internal_default_instance() {
    return reinterpret_cast<const post_base*>(
               &_post_base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(post_base& a, post_base& b) {
    a.Swap(&b);
  }
  inline void Swap(post_base* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(post_base* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline post_base* New() const final {
    return CreateMaybeMessage<post_base>(nullptr);
  }

  post_base* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<post_base>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const post_base& from);
  void MergeFrom(const post_base& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(post_base* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pepenet_social_protos.post_base";
  }
  protected:
  explicit post_base(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pepenet_5fsocial_2eproto);
    return ::descriptor_table_pepenet_5fsocial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kMsgFieldNumber = 2,
    kPseudonymFieldNumber = 3,
    kPkFieldNumber = 4,
    kTxRefFieldNumber = 5,
    kPepetagFieldNumber = 6,
    kDonationAddressFieldNumber = 7,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string pseudonym = 3;
  void clear_pseudonym();
  const std::string& pseudonym() const;
  void set_pseudonym(const std::string& value);
  void set_pseudonym(std::string&& value);
  void set_pseudonym(const char* value);
  void set_pseudonym(const char* value, size_t size);
  std::string* mutable_pseudonym();
  std::string* release_pseudonym();
  void set_allocated_pseudonym(std::string* pseudonym);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pseudonym();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pseudonym(
      std::string* pseudonym);
  private:
  const std::string& _internal_pseudonym() const;
  void _internal_set_pseudonym(const std::string& value);
  std::string* _internal_mutable_pseudonym();
  public:

  // bytes pk = 4;
  void clear_pk();
  const std::string& pk() const;
  void set_pk(const std::string& value);
  void set_pk(std::string&& value);
  void set_pk(const char* value);
  void set_pk(const void* value, size_t size);
  std::string* mutable_pk();
  std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pk();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pk(
      std::string* pk);
  private:
  const std::string& _internal_pk() const;
  void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  // bytes tx_ref = 5;
  void clear_tx_ref();
  const std::string& tx_ref() const;
  void set_tx_ref(const std::string& value);
  void set_tx_ref(std::string&& value);
  void set_tx_ref(const char* value);
  void set_tx_ref(const void* value, size_t size);
  std::string* mutable_tx_ref();
  std::string* release_tx_ref();
  void set_allocated_tx_ref(std::string* tx_ref);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tx_ref();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tx_ref(
      std::string* tx_ref);
  private:
  const std::string& _internal_tx_ref() const;
  void _internal_set_tx_ref(const std::string& value);
  std::string* _internal_mutable_tx_ref();
  public:

  // string pepetag = 6;
  void clear_pepetag();
  const std::string& pepetag() const;
  void set_pepetag(const std::string& value);
  void set_pepetag(std::string&& value);
  void set_pepetag(const char* value);
  void set_pepetag(const char* value, size_t size);
  std::string* mutable_pepetag();
  std::string* release_pepetag();
  void set_allocated_pepetag(std::string* pepetag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pepetag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pepetag(
      std::string* pepetag);
  private:
  const std::string& _internal_pepetag() const;
  void _internal_set_pepetag(const std::string& value);
  std::string* _internal_mutable_pepetag();
  public:

  // string donation_address = 7;
  void clear_donation_address();
  const std::string& donation_address() const;
  void set_donation_address(const std::string& value);
  void set_donation_address(std::string&& value);
  void set_donation_address(const char* value);
  void set_donation_address(const char* value, size_t size);
  std::string* mutable_donation_address();
  std::string* release_donation_address();
  void set_allocated_donation_address(std::string* donation_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_donation_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_donation_address(
      std::string* donation_address);
  private:
  const std::string& _internal_donation_address() const;
  void _internal_set_donation_address(const std::string& value);
  std::string* _internal_mutable_donation_address();
  public:

  // @@protoc_insertion_point(class_scope:pepenet_social_protos.post_base)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudonym_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pepetag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr donation_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pepenet_5fsocial_2eproto;
};
// -------------------------------------------------------------------

class post PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pepenet_social_protos.post) */ {
 public:
  inline post() : post(nullptr) {};
  virtual ~post();

  post(const post& from);
  post(post&& from) noexcept
    : post() {
    *this = ::std::move(from);
  }

  inline post& operator=(const post& from) {
    CopyFrom(from);
    return *this;
  }
  inline post& operator=(post&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const post& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const post* internal_default_instance() {
    return reinterpret_cast<const post*>(
               &_post_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(post& a, post& b) {
    a.Swap(&b);
  }
  inline void Swap(post* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(post* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline post* New() const final {
    return CreateMaybeMessage<post>(nullptr);
  }

  post* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<post>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const post& from);
  void MergeFrom(const post& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(post* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pepenet_social_protos.post";
  }
  protected:
  explicit post(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pepenet_5fsocial_2eproto);
    return ::descriptor_table_pepenet_5fsocial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // bytes sig = 2;
  void clear_sig();
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sig(
      std::string* sig);
  private:
  const std::string& _internal_sig() const;
  void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // .pepenet_social_protos.post_base base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pepenet_social_protos::post_base& base() const;
  ::pepenet_social_protos::post_base* release_base();
  ::pepenet_social_protos::post_base* mutable_base();
  void set_allocated_base(::pepenet_social_protos::post_base* base);
  private:
  const ::pepenet_social_protos::post_base& _internal_base() const;
  ::pepenet_social_protos::post_base* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pepenet_social_protos::post_base* base);
  ::pepenet_social_protos::post_base* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:pepenet_social_protos.post)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::pepenet_social_protos::post_base* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pepenet_5fsocial_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pep_base

// string msg = 1;
inline void pep_base::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pep_base::msg() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep_base.msg)
  return _internal_msg();
}
inline void pep_base::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.pep_base.msg)
}
inline std::string* pep_base::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep_base.msg)
  return _internal_mutable_msg();
}
inline const std::string& pep_base::_internal_msg() const {
  return msg_.Get();
}
inline void pep_base::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pep_base::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.pep_base.msg)
}
inline void pep_base::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.pep_base.msg)
}
inline void pep_base::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.pep_base.msg)
}
inline std::string* pep_base::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pep_base::release_msg() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep_base.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pep_base::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep_base.msg)
}
inline std::string* pep_base::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.pep_base.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void pep_base::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep_base.msg)
}

// string pseudonym = 2;
inline void pep_base::clear_pseudonym() {
  pseudonym_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pep_base::pseudonym() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep_base.pseudonym)
  return _internal_pseudonym();
}
inline void pep_base::set_pseudonym(const std::string& value) {
  _internal_set_pseudonym(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.pep_base.pseudonym)
}
inline std::string* pep_base::mutable_pseudonym() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep_base.pseudonym)
  return _internal_mutable_pseudonym();
}
inline const std::string& pep_base::_internal_pseudonym() const {
  return pseudonym_.Get();
}
inline void pep_base::_internal_set_pseudonym(const std::string& value) {
  
  pseudonym_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pep_base::set_pseudonym(std::string&& value) {
  
  pseudonym_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.pep_base.pseudonym)
}
inline void pep_base::set_pseudonym(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudonym_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.pep_base.pseudonym)
}
inline void pep_base::set_pseudonym(const char* value,
    size_t size) {
  
  pseudonym_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.pep_base.pseudonym)
}
inline std::string* pep_base::_internal_mutable_pseudonym() {
  
  return pseudonym_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pep_base::release_pseudonym() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep_base.pseudonym)
  return pseudonym_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pep_base::set_allocated_pseudonym(std::string* pseudonym) {
  if (pseudonym != nullptr) {
    
  } else {
    
  }
  pseudonym_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudonym,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep_base.pseudonym)
}
inline std::string* pep_base::unsafe_arena_release_pseudonym() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.pep_base.pseudonym)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pseudonym_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void pep_base::unsafe_arena_set_allocated_pseudonym(
    std::string* pseudonym) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pseudonym != nullptr) {
    
  } else {
    
  }
  pseudonym_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pseudonym, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep_base.pseudonym)
}

// bytes pk = 3;
inline void pep_base::clear_pk() {
  pk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pep_base::pk() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep_base.pk)
  return _internal_pk();
}
inline void pep_base::set_pk(const std::string& value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.pep_base.pk)
}
inline std::string* pep_base::mutable_pk() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep_base.pk)
  return _internal_mutable_pk();
}
inline const std::string& pep_base::_internal_pk() const {
  return pk_.Get();
}
inline void pep_base::_internal_set_pk(const std::string& value) {
  
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pep_base::set_pk(std::string&& value) {
  
  pk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.pep_base.pk)
}
inline void pep_base::set_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.pep_base.pk)
}
inline void pep_base::set_pk(const void* value,
    size_t size) {
  
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.pep_base.pk)
}
inline std::string* pep_base::_internal_mutable_pk() {
  
  return pk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pep_base::release_pk() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep_base.pk)
  return pk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pep_base::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    
  } else {
    
  }
  pk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep_base.pk)
}
inline std::string* pep_base::unsafe_arena_release_pk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.pep_base.pk)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pk_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void pep_base::unsafe_arena_set_allocated_pk(
    std::string* pk) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pk != nullptr) {
    
  } else {
    
  }
  pk_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pk, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep_base.pk)
}

// bytes tx_ref = 4;
inline void pep_base::clear_tx_ref() {
  tx_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pep_base::tx_ref() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep_base.tx_ref)
  return _internal_tx_ref();
}
inline void pep_base::set_tx_ref(const std::string& value) {
  _internal_set_tx_ref(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.pep_base.tx_ref)
}
inline std::string* pep_base::mutable_tx_ref() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep_base.tx_ref)
  return _internal_mutable_tx_ref();
}
inline const std::string& pep_base::_internal_tx_ref() const {
  return tx_ref_.Get();
}
inline void pep_base::_internal_set_tx_ref(const std::string& value) {
  
  tx_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pep_base::set_tx_ref(std::string&& value) {
  
  tx_ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.pep_base.tx_ref)
}
inline void pep_base::set_tx_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.pep_base.tx_ref)
}
inline void pep_base::set_tx_ref(const void* value,
    size_t size) {
  
  tx_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.pep_base.tx_ref)
}
inline std::string* pep_base::_internal_mutable_tx_ref() {
  
  return tx_ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pep_base::release_tx_ref() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep_base.tx_ref)
  return tx_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pep_base::set_allocated_tx_ref(std::string* tx_ref) {
  if (tx_ref != nullptr) {
    
  } else {
    
  }
  tx_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep_base.tx_ref)
}
inline std::string* pep_base::unsafe_arena_release_tx_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.pep_base.tx_ref)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tx_ref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void pep_base::unsafe_arena_set_allocated_tx_ref(
    std::string* tx_ref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tx_ref != nullptr) {
    
  } else {
    
  }
  tx_ref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tx_ref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep_base.tx_ref)
}

// string pepetag = 5;
inline void pep_base::clear_pepetag() {
  pepetag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pep_base::pepetag() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep_base.pepetag)
  return _internal_pepetag();
}
inline void pep_base::set_pepetag(const std::string& value) {
  _internal_set_pepetag(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.pep_base.pepetag)
}
inline std::string* pep_base::mutable_pepetag() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep_base.pepetag)
  return _internal_mutable_pepetag();
}
inline const std::string& pep_base::_internal_pepetag() const {
  return pepetag_.Get();
}
inline void pep_base::_internal_set_pepetag(const std::string& value) {
  
  pepetag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pep_base::set_pepetag(std::string&& value) {
  
  pepetag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.pep_base.pepetag)
}
inline void pep_base::set_pepetag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pepetag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.pep_base.pepetag)
}
inline void pep_base::set_pepetag(const char* value,
    size_t size) {
  
  pepetag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.pep_base.pepetag)
}
inline std::string* pep_base::_internal_mutable_pepetag() {
  
  return pepetag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pep_base::release_pepetag() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep_base.pepetag)
  return pepetag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pep_base::set_allocated_pepetag(std::string* pepetag) {
  if (pepetag != nullptr) {
    
  } else {
    
  }
  pepetag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pepetag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep_base.pepetag)
}
inline std::string* pep_base::unsafe_arena_release_pepetag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.pep_base.pepetag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pepetag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void pep_base::unsafe_arena_set_allocated_pepetag(
    std::string* pepetag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pepetag != nullptr) {
    
  } else {
    
  }
  pepetag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pepetag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep_base.pepetag)
}

// string donation_address = 6;
inline void pep_base::clear_donation_address() {
  donation_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pep_base::donation_address() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep_base.donation_address)
  return _internal_donation_address();
}
inline void pep_base::set_donation_address(const std::string& value) {
  _internal_set_donation_address(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.pep_base.donation_address)
}
inline std::string* pep_base::mutable_donation_address() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep_base.donation_address)
  return _internal_mutable_donation_address();
}
inline const std::string& pep_base::_internal_donation_address() const {
  return donation_address_.Get();
}
inline void pep_base::_internal_set_donation_address(const std::string& value) {
  
  donation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pep_base::set_donation_address(std::string&& value) {
  
  donation_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.pep_base.donation_address)
}
inline void pep_base::set_donation_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  donation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.pep_base.donation_address)
}
inline void pep_base::set_donation_address(const char* value,
    size_t size) {
  
  donation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.pep_base.donation_address)
}
inline std::string* pep_base::_internal_mutable_donation_address() {
  
  return donation_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pep_base::release_donation_address() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep_base.donation_address)
  return donation_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pep_base::set_allocated_donation_address(std::string* donation_address) {
  if (donation_address != nullptr) {
    
  } else {
    
  }
  donation_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), donation_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep_base.donation_address)
}
inline std::string* pep_base::unsafe_arena_release_donation_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.pep_base.donation_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return donation_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void pep_base::unsafe_arena_set_allocated_donation_address(
    std::string* donation_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (donation_address != nullptr) {
    
  } else {
    
  }
  donation_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      donation_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep_base.donation_address)
}

// -------------------------------------------------------------------

// pep

// .pepenet_social_protos.pep_base base = 1;
inline bool pep::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool pep::has_base() const {
  return _internal_has_base();
}
inline void pep::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pepenet_social_protos::pep_base& pep::_internal_base() const {
  const ::pepenet_social_protos::pep_base* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pepenet_social_protos::pep_base*>(
      &::pepenet_social_protos::_pep_base_default_instance_);
}
inline const ::pepenet_social_protos::pep_base& pep::base() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep.base)
  return _internal_base();
}
inline void pep::unsafe_arena_set_allocated_base(
    ::pepenet_social_protos::pep_base* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep.base)
}
inline ::pepenet_social_protos::pep_base* pep::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pepenet_social_protos::pep_base* pep::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep.base)
  
  ::pepenet_social_protos::pep_base* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pepenet_social_protos::pep_base* pep::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pepenet_social_protos::pep_base>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pepenet_social_protos::pep_base* pep::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep.base)
  return _internal_mutable_base();
}
inline void pep::set_allocated_base(::pepenet_social_protos::pep_base* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep.base)
}

// bytes sig = 2;
inline void pep::clear_sig() {
  sig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& pep::sig() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.pep.sig)
  return _internal_sig();
}
inline void pep::set_sig(const std::string& value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.pep.sig)
}
inline std::string* pep::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.pep.sig)
  return _internal_mutable_sig();
}
inline const std::string& pep::_internal_sig() const {
  return sig_.Get();
}
inline void pep::_internal_set_sig(const std::string& value) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void pep::set_sig(std::string&& value) {
  
  sig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.pep.sig)
}
inline void pep::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.pep.sig)
}
inline void pep::set_sig(const void* value,
    size_t size) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.pep.sig)
}
inline std::string* pep::_internal_mutable_sig() {
  
  return sig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* pep::release_sig() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.pep.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pep::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.pep.sig)
}
inline std::string* pep::unsafe_arena_release_sig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.pep.sig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void pep::unsafe_arena_set_allocated_sig(
    std::string* sig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.pep.sig)
}

// -------------------------------------------------------------------

// post_base

// string title = 1;
inline void post_base::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post_base::title() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post_base.title)
  return _internal_title();
}
inline void post_base::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post_base.title)
}
inline std::string* post_base::mutable_title() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post_base.title)
  return _internal_mutable_title();
}
inline const std::string& post_base::_internal_title() const {
  return title_.Get();
}
inline void post_base::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post_base::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post_base.title)
}
inline void post_base::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post_base.title)
}
inline void post_base::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post_base.title)
}
inline std::string* post_base::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post_base::release_title() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post_base.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post_base::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post_base.title)
}
inline std::string* post_base::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post_base.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post_base::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post_base.title)
}

// string msg = 2;
inline void post_base::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post_base::msg() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post_base.msg)
  return _internal_msg();
}
inline void post_base::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post_base.msg)
}
inline std::string* post_base::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post_base.msg)
  return _internal_mutable_msg();
}
inline const std::string& post_base::_internal_msg() const {
  return msg_.Get();
}
inline void post_base::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post_base::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post_base.msg)
}
inline void post_base::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post_base.msg)
}
inline void post_base::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post_base.msg)
}
inline std::string* post_base::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post_base::release_msg() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post_base.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post_base::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post_base.msg)
}
inline std::string* post_base::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post_base.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post_base::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post_base.msg)
}

// string pseudonym = 3;
inline void post_base::clear_pseudonym() {
  pseudonym_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post_base::pseudonym() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post_base.pseudonym)
  return _internal_pseudonym();
}
inline void post_base::set_pseudonym(const std::string& value) {
  _internal_set_pseudonym(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post_base.pseudonym)
}
inline std::string* post_base::mutable_pseudonym() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post_base.pseudonym)
  return _internal_mutable_pseudonym();
}
inline const std::string& post_base::_internal_pseudonym() const {
  return pseudonym_.Get();
}
inline void post_base::_internal_set_pseudonym(const std::string& value) {
  
  pseudonym_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post_base::set_pseudonym(std::string&& value) {
  
  pseudonym_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post_base.pseudonym)
}
inline void post_base::set_pseudonym(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudonym_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post_base.pseudonym)
}
inline void post_base::set_pseudonym(const char* value,
    size_t size) {
  
  pseudonym_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post_base.pseudonym)
}
inline std::string* post_base::_internal_mutable_pseudonym() {
  
  return pseudonym_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post_base::release_pseudonym() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post_base.pseudonym)
  return pseudonym_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post_base::set_allocated_pseudonym(std::string* pseudonym) {
  if (pseudonym != nullptr) {
    
  } else {
    
  }
  pseudonym_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pseudonym,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post_base.pseudonym)
}
inline std::string* post_base::unsafe_arena_release_pseudonym() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post_base.pseudonym)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pseudonym_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post_base::unsafe_arena_set_allocated_pseudonym(
    std::string* pseudonym) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pseudonym != nullptr) {
    
  } else {
    
  }
  pseudonym_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pseudonym, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post_base.pseudonym)
}

// bytes pk = 4;
inline void post_base::clear_pk() {
  pk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post_base::pk() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post_base.pk)
  return _internal_pk();
}
inline void post_base::set_pk(const std::string& value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post_base.pk)
}
inline std::string* post_base::mutable_pk() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post_base.pk)
  return _internal_mutable_pk();
}
inline const std::string& post_base::_internal_pk() const {
  return pk_.Get();
}
inline void post_base::_internal_set_pk(const std::string& value) {
  
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post_base::set_pk(std::string&& value) {
  
  pk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post_base.pk)
}
inline void post_base::set_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post_base.pk)
}
inline void post_base::set_pk(const void* value,
    size_t size) {
  
  pk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post_base.pk)
}
inline std::string* post_base::_internal_mutable_pk() {
  
  return pk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post_base::release_pk() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post_base.pk)
  return pk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post_base::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    
  } else {
    
  }
  pk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post_base.pk)
}
inline std::string* post_base::unsafe_arena_release_pk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post_base.pk)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pk_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post_base::unsafe_arena_set_allocated_pk(
    std::string* pk) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pk != nullptr) {
    
  } else {
    
  }
  pk_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pk, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post_base.pk)
}

// bytes tx_ref = 5;
inline void post_base::clear_tx_ref() {
  tx_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post_base::tx_ref() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post_base.tx_ref)
  return _internal_tx_ref();
}
inline void post_base::set_tx_ref(const std::string& value) {
  _internal_set_tx_ref(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post_base.tx_ref)
}
inline std::string* post_base::mutable_tx_ref() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post_base.tx_ref)
  return _internal_mutable_tx_ref();
}
inline const std::string& post_base::_internal_tx_ref() const {
  return tx_ref_.Get();
}
inline void post_base::_internal_set_tx_ref(const std::string& value) {
  
  tx_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post_base::set_tx_ref(std::string&& value) {
  
  tx_ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post_base.tx_ref)
}
inline void post_base::set_tx_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post_base.tx_ref)
}
inline void post_base::set_tx_ref(const void* value,
    size_t size) {
  
  tx_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post_base.tx_ref)
}
inline std::string* post_base::_internal_mutable_tx_ref() {
  
  return tx_ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post_base::release_tx_ref() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post_base.tx_ref)
  return tx_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post_base::set_allocated_tx_ref(std::string* tx_ref) {
  if (tx_ref != nullptr) {
    
  } else {
    
  }
  tx_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post_base.tx_ref)
}
inline std::string* post_base::unsafe_arena_release_tx_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post_base.tx_ref)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tx_ref_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post_base::unsafe_arena_set_allocated_tx_ref(
    std::string* tx_ref) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tx_ref != nullptr) {
    
  } else {
    
  }
  tx_ref_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tx_ref, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post_base.tx_ref)
}

// string pepetag = 6;
inline void post_base::clear_pepetag() {
  pepetag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post_base::pepetag() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post_base.pepetag)
  return _internal_pepetag();
}
inline void post_base::set_pepetag(const std::string& value) {
  _internal_set_pepetag(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post_base.pepetag)
}
inline std::string* post_base::mutable_pepetag() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post_base.pepetag)
  return _internal_mutable_pepetag();
}
inline const std::string& post_base::_internal_pepetag() const {
  return pepetag_.Get();
}
inline void post_base::_internal_set_pepetag(const std::string& value) {
  
  pepetag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post_base::set_pepetag(std::string&& value) {
  
  pepetag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post_base.pepetag)
}
inline void post_base::set_pepetag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pepetag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post_base.pepetag)
}
inline void post_base::set_pepetag(const char* value,
    size_t size) {
  
  pepetag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post_base.pepetag)
}
inline std::string* post_base::_internal_mutable_pepetag() {
  
  return pepetag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post_base::release_pepetag() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post_base.pepetag)
  return pepetag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post_base::set_allocated_pepetag(std::string* pepetag) {
  if (pepetag != nullptr) {
    
  } else {
    
  }
  pepetag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pepetag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post_base.pepetag)
}
inline std::string* post_base::unsafe_arena_release_pepetag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post_base.pepetag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pepetag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post_base::unsafe_arena_set_allocated_pepetag(
    std::string* pepetag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pepetag != nullptr) {
    
  } else {
    
  }
  pepetag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pepetag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post_base.pepetag)
}

// string donation_address = 7;
inline void post_base::clear_donation_address() {
  donation_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post_base::donation_address() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post_base.donation_address)
  return _internal_donation_address();
}
inline void post_base::set_donation_address(const std::string& value) {
  _internal_set_donation_address(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post_base.donation_address)
}
inline std::string* post_base::mutable_donation_address() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post_base.donation_address)
  return _internal_mutable_donation_address();
}
inline const std::string& post_base::_internal_donation_address() const {
  return donation_address_.Get();
}
inline void post_base::_internal_set_donation_address(const std::string& value) {
  
  donation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post_base::set_donation_address(std::string&& value) {
  
  donation_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post_base.donation_address)
}
inline void post_base::set_donation_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  donation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post_base.donation_address)
}
inline void post_base::set_donation_address(const char* value,
    size_t size) {
  
  donation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post_base.donation_address)
}
inline std::string* post_base::_internal_mutable_donation_address() {
  
  return donation_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post_base::release_donation_address() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post_base.donation_address)
  return donation_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post_base::set_allocated_donation_address(std::string* donation_address) {
  if (donation_address != nullptr) {
    
  } else {
    
  }
  donation_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), donation_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post_base.donation_address)
}
inline std::string* post_base::unsafe_arena_release_donation_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post_base.donation_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return donation_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post_base::unsafe_arena_set_allocated_donation_address(
    std::string* donation_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (donation_address != nullptr) {
    
  } else {
    
  }
  donation_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      donation_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post_base.donation_address)
}

// -------------------------------------------------------------------

// post

// .pepenet_social_protos.post_base base = 1;
inline bool post::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool post::has_base() const {
  return _internal_has_base();
}
inline void post::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pepenet_social_protos::post_base& post::_internal_base() const {
  const ::pepenet_social_protos::post_base* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pepenet_social_protos::post_base*>(
      &::pepenet_social_protos::_post_base_default_instance_);
}
inline const ::pepenet_social_protos::post_base& post::base() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post.base)
  return _internal_base();
}
inline void post::unsafe_arena_set_allocated_base(
    ::pepenet_social_protos::post_base* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post.base)
}
inline ::pepenet_social_protos::post_base* post::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pepenet_social_protos::post_base* post::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post.base)
  
  ::pepenet_social_protos::post_base* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pepenet_social_protos::post_base* post::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pepenet_social_protos::post_base>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pepenet_social_protos::post_base* post::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post.base)
  return _internal_mutable_base();
}
inline void post::set_allocated_base(::pepenet_social_protos::post_base* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post.base)
}

// bytes sig = 2;
inline void post::clear_sig() {
  sig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& post::sig() const {
  // @@protoc_insertion_point(field_get:pepenet_social_protos.post.sig)
  return _internal_sig();
}
inline void post::set_sig(const std::string& value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:pepenet_social_protos.post.sig)
}
inline std::string* post::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:pepenet_social_protos.post.sig)
  return _internal_mutable_sig();
}
inline const std::string& post::_internal_sig() const {
  return sig_.Get();
}
inline void post::_internal_set_sig(const std::string& value) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void post::set_sig(std::string&& value) {
  
  sig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pepenet_social_protos.post.sig)
}
inline void post::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pepenet_social_protos.post.sig)
}
inline void post::set_sig(const void* value,
    size_t size) {
  
  sig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pepenet_social_protos.post.sig)
}
inline std::string* post::_internal_mutable_sig() {
  
  return sig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* post::release_sig() {
  // @@protoc_insertion_point(field_release:pepenet_social_protos.post.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void post::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pepenet_social_protos.post.sig)
}
inline std::string* post::unsafe_arena_release_sig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pepenet_social_protos.post.sig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void post::unsafe_arena_set_allocated_sig(
    std::string* sig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pepenet_social_protos.post.sig)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pepenet_social_protos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pepenet_5fsocial_2eproto
